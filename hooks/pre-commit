#!/usr/bin/env python3
from subprocess import check_output, CalledProcessError
from pathlib import Path
from typing import Dict, Set, Union, Tuple
import sys


def get_tracked_files() -> Union[Set[Path], None]:
    tracked = set()

    try:
        cmd_output = check_output(['git', 'ls-tree', '--name-only', '--full-tree', '-r', 'HEAD', 'Assets/'])
        cmd_output = cmd_output.decode('utf8').strip()

        if len(cmd_output) > 0:
            for line in cmd_output.split('\n'):
                # Cast to concrete paths native to the OS
                pth = Path(line)
                tracked.add(pth)
                # Need to add the directory components of tracked file paths
                # because there will be .meta files corresponding to these in
                # version control
                for p in pth.parents:
                    if p.name == 'Assets':
                        break
                    else:
                        tracked.add(p)

    except CalledProcessError:
        tracked = None

    return tracked


def get_index_changes() -> Union[Dict[str, Set[Tuple[Path]]], None]:
    changes = {}

    try:
        # -M enables rename detection
        # -z makes the output nul delimited, even lines
        cmd_output = check_output(['git', 'diff-index', '--cached', '--name-status', '-M', '-z', 'HEAD', '--', ':(top)Assets/'])
        cmd_output = cmd_output.decode('utf8').strip()

        if len(cmd_output) > 0:
            words = cmd_output.split('\0') # even lines are delimited by NUL
            for i in range(len(words)):
                change = words[i]
                if change == 'A' and i+1 < len(words):
                    # Detect additions
                    # Cast to concrete paths native to the OS
                    path = Path(words[i+1])
                    # Putting paths inside set is okay because paths are immutable and hashable
                    changes.setdefault(change, set()).add((path,))
                    i += 1
                elif change == 'D' and i+1 < len(words):
                    # Detect deletions
                    # Cast to concrete paths native to the OS
                    path = Path(words[i+1])
                    # Putting paths inside set is okay because paths are immutable and hashable
                    changes.setdefault(change, set()).add((path,))
                elif change.startswith('R') and i+2 < len(words):
                    # Detect renames
                    # Cast to concrete paths native to the OS
                    path_from, path_to = Path(words[i+1]), Path(words[i+2])
                    # Putting a tuple of paths inside set is okay because
                    # paths are immutable and hashable
                    # and tuples of hashable elements are hashable
                    changes.setdefault('R', set()).add((path_from, path_to))
                    i += 2

    except CalledProcessError:
        changes = None

    return changes


def get_metafile_path(p):
    return Path(p.parent / p.name).with_suffix(p.suffix + '.meta')


def verify_tracked_files(tracked_files: Set[Path]) -> bool:
    success = True

    for path in tracked_files:
        # Unity doesn't consider directories or files starting with a period as assets
        if path.name.startswith('.'):
            continue

        if path.is_dir():
            dir_meta_file = path.with_suffix('.meta')
            if dir_meta_file not in tracked_files:
                print(f"{dir_meta_file} is not tracked, but {path} directory is.")
                success = False
        elif path.is_file():
            if path.suffix == '.meta':  # if it is a meta file
                asset_file = path.with_suffix('') # remove suffix from meta file
                if asset_file not in tracked_files:
                    print(f"Asset {asset_file} is not tracked, but {path} is.")
                    success = False
            else:
                meta_file = get_metafile_path(path)
                if meta_file not in tracked_files:
                    print(f"{meta_file} is not tracked, but asset {path} is.")
                    success = False

    return success


def verify_index_changes(tracked_files: Set[Path], index_changes: Dict[str, Set[Path]]) -> bool:
    success = True

    new_paths = index_changes.setdefault('A', set())
    for pth, in new_paths:
        if pth.suffix == '.meta':
            asset_file = (pth.with_suffix(''),)
            # .meta file added without adding asset file
            if asset_file not in new_paths and asset_file not in tracked_files:
                print(f"Added {pth} without adding {asset_file[0]}")
                success = False
        else:
            meta_file = (get_metafile_path(pth),)
            # asset added without adding .meta file
            if meta_file not in new_paths and meta_file not in tracked_files:
                print(f"Added {pth} without adding {meta_file[0]}")
                success = False

    deleted_paths = index_changes.setdefault('D', set())
    for pth, in deleted_paths:
        if pth.suffix == '.meta':
            asset_file = (pth.with_suffix(''),)
            # .meta file deleted without deleting asset
            if asset_file not in deleted_paths or asset_file in tracked_files:
                print(f"Removed {pth} without removing {asset_file[0]}")
                success = False
        else:
            meta_file = (get_metafile_path(pth),)
            # asset deleted without deleting .meta file
            if meta_file not in deleted_paths or meta_file in tracked_files:
                print(f"Removed {pth} without removing {meta_file[0]}")
                success = False

    renamed_paths = index_changes.setdefault('R', set())
    for pth_from, pth_to in renamed_paths:
        if pth_from.suffix == '.meta' and pth_to.suffix == '.meta':
            asset_file_from, asset_file_to = pth_from.with_suffix(''), pth_to.with_suffix('')
            # .meta file renamed without renaming asset
            if (asset_file_from, asset_file_to) not in renamed_paths and asset_file_to not in tracked_files:
                print(f"Renamed {pth_from} to {pth_to} without renaming {asset_file_from} to {asset_file_to}")
                success = False
        elif pth_from.suffix != '.meta' and pth_to.suffix != '.meta' and pth_from.suffix == pth_to.suffix:
            meta_file_from, meta_file_to = get_metafile_path(pth_from), get_metafile_path(pth_to)
            # asset renamed without renaming .meta file
            if (meta_file_from, meta_file_to) not in renamed_paths and meta_file_to not in tracked_files:
                print(f"Renamed {pth_from} to {pth_to} without renaming {meta_file_from} to {meta_file_to}")
                success = False

    return success


def main():
    # To allow testing, we accept a working directory argument
    if len(sys.argv) > 1:
        import os
        working_dir = Path(sys.argv[1])
        if working_dir.exists() and working_dir.is_dir():
            os.chdir(working_dir)

    success = True

    tracked_files = get_tracked_files()
    if tracked_files is not None:
        success = success and verify_tracked_files(tracked_files)
    else:
        success = False

    index_changes = get_index_changes()
    if index_changes is not None:
        success = success and verify_index_changes(tracked_files, index_changes)
    else:
        success = False

    if success:
        sys.exit(0)
    else:
        sys.exit(1)


if __name__ == '__main__':
    main()
